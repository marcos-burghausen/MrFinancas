üîô [Retornar √† documenta√ß√£o principal](../../README.md)

# Caso de Uso: Gerenciar Cart√£o

## Diagrama de Caso de Uso

```mermaid
usecaseDiagram
    actor Usu√°rio
    Usu√°rio --> (Gerenciar Cart√£o)
```

## Descri√ß√£o

Permite que o usu√°rio crie, edite ou exclua cart√µes de cr√©dito.

## Atores

- **Prim√°rio**: Usu√°rio

## Pr√©-condi√ß√µes

- Usu√°rio est√° autenticado (JWT v√°lido).
- Existem contas em `accounts`.

## P√≥s-condi√ß√µes

- Cart√£o √© criado/editada/exclu√≠do em `cards`.
- Lista de cart√µes √© atualizada.
- Log de a√ß√£o √© registrado em `logs`.

## Fluxo Principal

1. Usu√°rio acessa a tela de cart√µes no frontend.
2. Escolhe a√ß√£o:
   - **Criar**: Preenche `{ name, limit, account_id, icon, color, closing_date, due_date }`.
     - Frontend envia `POST /api/cards`.
     - Backend valida: `name` √∫nico, `limit > 0`, `account_id` v√°lido.
     - Salva em `cards`.
   - **Editar**: Seleciona cart√£o, atualiza formul√°rio, envia `PUT /api/cards/{id}`.
     - Backend valida e atualiza.
   - **Excluir**: Seleciona cart√£o, envia `DELETE /api/cards/{id}`.
     - Backend verifica `transactions` e `invoices`; se vinculado, retorna erro.
     - Remove cart√£o (soft delete).
3. Frontend atualiza lista.
4. Backend registra a√ß√£o em `logs` (a√ß√£o: `create_card`, `update_card`, `delete_card`).

## Fluxos Alternativos

- **A1**: Dados inv√°lidos ‚Üí Backend retorna erro 422 ("Dados inv√°lidos ou conta inv√°lida").
- **A2**: Cart√£o vinculado ‚Üí Backend retorna erro 409 ("Cart√£o vinculado a transa√ß√µes/faturas").
- **A3**: Uso excede 80% do limite ‚Üí Backend envia notifica√ß√£o via `notifications`.

## Regras de Neg√≥cio

- Cart√µes exigem `account_id` v√°lido.
- Nomes s√£o √∫nicos por usu√°rio.
- Limites: `limit > 0`.
- Alerta se uso > 80% do limite (calculado via `transactions`).

## Notas T√©cnicas

- **Frontend**: Vue.js, Vuetify.
- **Backend**: Laravel, Eloquent (modelo `Card`).
- **Endpoints**:
  - `POST /api/cards`: `{ name: string, limit: decimal, account_id: int, icon: string, color: string, closing_date: date, due_date: date }`.
  - `PUT /api/cards/{id}`: Atualiza dados.
  - `DELETE /api/cards/{id}`: Exclui (soft delete).
- **Banco**: Tabela `cards` (`name`, `user_id`, `account_id`, `limit`, `closing_date`, `due_date`); `logs` (`action`).
- **Integra√ß√µes**: Aparece em `transactions`, `invoices`, notifica√ß√µes.
- **Seguran√ßa**: JWT, valida√ß√£o de `user_id`.
