üîô [Retornar √† documenta√ß√£o principal](../../README.md)

# Caso de Uso: Fazer Login

## Diagrama de Caso de Uso

```mermaid
usecaseDiagram
    actor Usu√°rio
    actor ProvedorOAuth
    Usu√°rio --> (Fazer Login)
    Usu√°rio --> ProvedorOAuth : usa
```

## Descri√ß√£o

Permite que o usu√°rio acesse o sistema via e-mail/senha ou OAuth (Facebook, Google, LinkedIn), com suporte a autentica√ß√£o multifator (MFA) e recupera√ß√£o de senha.

## Atores

- **Prim√°rio**: Usu√°rio
- **Secund√°rio**: Provedor OAuth

## Pr√©-condi√ß√µes

- Usu√°rio possui conta verificada (tradicional) ou registrada (OAuth).
- Provedores OAuth est√£o configurados no backend.

## P√≥s-condi√ß√µes

- Usu√°rio recebe token JWT e √© redirecionado ao dashboard.
- Senha √© redefinida (se recupera√ß√£o solicitada).
- Log de login √© registrado na tabela `logs`.

## Fluxo Principal

1. Usu√°rio acessa a tela de login no frontend (Vue.js).
2. Usu√°rio escolhe m√©todo:
   - **Tradicional**:
     - Insere e-mail e senha no formul√°rio.
     - Frontend envia `POST /api/login` com `{ email, password }`.
     - Backend valida credenciais na tabela `users` (email √∫nico, senha com bcrypt).
     - Se MFA ativado (verificado em `settings.mfa_enabled`), solicita c√≥digo via SMS (Twilio) ou app autenticador (Google Authenticator).
     - Backend gera token JWT (Laravel Sanctum) e retorna ao frontend.
     - Frontend redireciona para o dashboard.
   - **OAuth**:
     - Usu√°rio clica em bot√£o OAuth (ex.: "Entrar com Google").
     - Frontend redireciona para provedor via Laravel Socialite.
     - Provedor autentica e retorna dados (e-mail, nome).
     - Backend valida usu√°rio em `users`, cria se necess√°rio, gera token JWT.
     - Frontend redireciona para o dashboard.
3. Backend registra login na tabela `logs` (a√ß√£o: `login`, detalhes: e-mail, timestamp).

## Fluxos Alternativos

- **A1**: Credenciais inv√°lidas ‚Üí Backend retorna erro 401 ("E-mail ou senha inv√°lidos") ap√≥s 5 tentativas, bloqueia temporariamente.
- **A2**: C√≥digo MFA inv√°lido ‚Üí Backend retorna erro 422 ("C√≥digo inv√°lido") e solicita novo c√≥digo.
- **A3**: Recupera√ß√£o de senha ‚Üí Usu√°rio clica em "Esqueceu a senha?", backend envia link via `POST /api/password/reset`, usu√°rio redefine senha e retorna ao login.
- **A4**: Falha OAuth ‚Üí Backend retorna erro 500 ("Falha na autentica√ß√£o OAuth") e redireciona √† tela de login.

## Regras de Neg√≥cio

- Usu√°rios n√£o verificados (`users.email_verified = false`) n√£o podem logar (tradicional).
- MFA √© opcional, configurado em `settings.mfa_enabled`.
- Links de redefini√ß√£o expiram em 1 hora.
- Tokens JWT expiram em 24 horas.

## Notas T√©cnicas

- **Frontend**: Vue.js com Vuetify (formul√°rio reativo), Axios para requisi√ß√µes.
- **Backend**: Laravel com Sanctum (tokens), Socialite (OAuth), Eloquent (modelo `User`).
- **Endpoints**:
  - `POST /api/login`: `{ email: string, password: string }` ‚Üí `{ token: string }`.
  - `POST /api/password/reset`: `{ email: string }` ‚Üí Envia link.
- **Banco**: Tabela `users` (`email`, `password`, `email_verified`); `settings` (`mfa_enabled`, `mfa_method`); `logs` (`action`, `details`).
- **Integra√ß√µes**:
  - Twilio/Google Authenticator para MFA.
  - Laravel Socialite para OAuth.
  - AWS SES (via Email Service) para e-mails de recupera√ß√£o.
- **Seguran√ßa**: HTTPS, bcrypt para senhas, rate limiting (5 tentativas).
