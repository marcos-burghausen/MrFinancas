üîô [Retornar √† documenta√ß√£o principal](../../README.md)

# Caso de Uso: Visualizar, Editar e Excluir Transa√ß√£o

## Diagrama de Caso de Uso

```mermaid
usecaseDiagram
    actor Usu√°rio
    Usu√°rio --> (Visualizar Transa√ß√£o)
    Usu√°rio --> (Editar Transa√ß√£o)
    Usu√°rio --> (Excluir Transa√ß√£o)
```

## Descri√ß√£o

Permite que o usu√°rio visualize, edite ou exclua transa√ß√µes financeiras.

## Atores

- **Prim√°rio**: Usu√°rio

## Pr√©-condi√ß√µes

- Usu√°rio est√° autenticado (JWT v√°lido).
- Existem transa√ß√µes em `transactions`.

## P√≥s-condi√ß√µes

- Lista de transa√ß√µes √© exibida.
- Transa√ß√£o √© editada/exclu√≠da, com saldos atualizados.
- Log de a√ß√£o √© registrado em `logs`.

## Fluxo Principal

1. Usu√°rio acessa a tela de transa√ß√µes no frontend.
2. Aplica filtros: `{ start_date, end_date, category_id, account_id }`.
3. Frontend envia `GET /api/transactions` com filtros.
4. Backend retorna transa√ß√µes de `transactions`.
5. Frontend exibe lista com Vuetify.
6. Usu√°rio seleciona transa√ß√£o:
   - **Editar**:
     - Abre formul√°rio com dados atuais.
     - Frontend envia `PUT /api/transactions/{id}` com `{ amount, date, description, account_id, card_id, category_id }`.
     - Backend valida e atualiza, recalcula `accounts.balance` ou `invoices`.
   - **Excluir**:
     - Confirma exclus√£o, envia `DELETE /api/transactions/{id}`.
     - Backend remove (soft delete) e atualiza saldos.
     - Remove notifica√ß√µes associadas em `notifications`.
7. Backend registra a√ß√£o em `logs` (a√ß√£o: `update_transaction`, `delete_transaction`).
8. Frontend atualiza lista.

## Fluxos Alternativos

- **A1**: Nenhum resultado ‚Üí Backend retorna erro 404 ("Nenhum resultado encontrado").
- **A2**: Dados inv√°lidos na edi√ß√£o ‚Üí Backend retorna erro 422 ("Dados inv√°lidos").

## Regras de Neg√≥cio

- Exclus√£o de transa√ß√µes recorrentes remove inst√¢ncias futuras.
- Edi√ß√£o atualiza saldos e notifica√ß√µes.
- Filtros: At√© 1 ano de dados (`start_date >= now() - 1 year`).

## Notas T√©cnicas

- **Frontend**: Vue.js, Vuetify.
- **Backend**: Laravel, Eloquent (modelo `Transaction`).
- **Endpoints**:
  - `GET /api/transactions?start_date=YYYY-MM-DD&end_date=YYYY-MM-DD&category_id=int&account_id=int`.
  - `PUT /api/transactions/{id}`: Atualiza dados.
  - `DELETE /api/transactions/{id}`: Exclui (soft delete).
- **Banco**: Tabela `transactions` (`amount`, `date`, `account_id`, `card_id`, `category_id`); `accounts` (`balance`); `notifications`; `logs`.
- **Integra√ß√µes**: Atualiza relat√≥rios, faturas.
- **Seguran√ßa**: JWT, transa√ß√µes SQL.
