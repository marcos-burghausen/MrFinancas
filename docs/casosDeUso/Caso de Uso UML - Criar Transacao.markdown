üîô [Retornar √† documenta√ß√£o principal](../../README.md)

# Caso de Uso: Criar Transa√ß√£o

## Diagrama de Caso de Uso

```mermaid
usecaseDiagram
    actor Usu√°rio
    Usu√°rio --> (Criar Transa√ß√£o)
```

## Descri√ß√£o

Permite que o usu√°rio crie transa√ß√µes financeiras (despesas, receitas, cart√µes, estornos) com suporte a recorr√™ncia.

## Atores

- **Prim√°rio**: Usu√°rio

## Pr√©-condi√ß√µes

- Usu√°rio est√° autenticado (JWT v√°lido).
- Existem contas (`accounts`), cart√µes (`cards`) e categorias (`categories`).

## P√≥s-condi√ß√µes

- Transa√ß√£o √© salva em `transactions`.
- Saldos de `accounts` ou `cards` s√£o atualizados.
- Notifica√ß√£o de vencimento √© agendada (se aplic√°vel).
- Log de cria√ß√£o √© registrado em `logs`.

## Fluxo Principal

1. Usu√°rio acessa a tela de transa√ß√µes no frontend.
2. Seleciona tipo: Despesa, Receita, Cart√£o, Estorno.
3. Preenche formul√°rio: `{ amount, date, description, account_id, card_id, category_id, recurring, frequency, end_date }`.
4. Frontend envia `POST /api/transactions`.
5. Backend valida:
   - `amount > 0` (exceto estornos).
   - `account_id`, `card_id`, `category_id` v√°lidos para `user_id`.
6. Se `recurring = true`, agenda inst√¢ncias futuras (`frequency`: daily, weekly, monthly; `end_date`).
7. Salva transa√ß√£o em `transactions` e atualiza `accounts.balance` ou `cards` (via `invoices`).
8. Agenda notifica√ß√£o em `notifications` (se `date` definida).
9. Backend registra a√ß√£o em `logs` (a√ß√£o: `create_transaction`).
10. Frontend exibe confirma√ß√£o.

## Fluxos Alternativos

- **A1**: Dados inv√°lidos ‚Üí Backend retorna erro 422 ("Dados inv√°lidos, verifique os campos").
- **A2**: Saldo insuficiente ‚Üí Backend envia alerta, mas permite salvar (configur√°vel).

## Regras de Neg√≥cio

- Valores: `amount > 0` (exceto estornos).
- `account_id` ou `card_id` obrigat√≥rio.
- Recorr√™ncia: Gera inst√¢ncias at√© `end_date`.
- Vencimentos associados a `notifications`.

## Notas T√©cnicas

- **Frontend**: Vue.js, Vuetify.
- **Backend**: Laravel, Eloquent (modelo `Transaction`).
- **Endpoint**: `POST /api/transactions`: `{ amount: decimal, date: date, description: string, account_id: int, card_id: int|null, category_id: int, recurring: boolean, frequency: string|null, end_date: date|null }`.
- **Banco**: Tabela `transactions` (`amount`, `date`, `account_id`, `card_id`, `category_id`, `recurring`, `frequency`, `end_date`); `accounts` (`balance`); `notifications`; `logs`.
- **Integra√ß√µes**: Laravel Queue (recorr√™ncia, notifica√ß√µes).
- **Seguran√ßa**: JWT, transa√ß√µes SQL para consist√™ncia.
