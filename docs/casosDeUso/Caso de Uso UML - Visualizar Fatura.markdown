üîô [Retornar √† documenta√ß√£o principal](../../README.md)

# Caso de Uso: Visualizar Fatura

## Diagrama de Caso de Uso

```mermaid
usecaseDiagram
    actor Usu√°rio
    Usu√°rio --> (Visualizar Fatura)
```

## Descri√ß√£o

Permite que o usu√°rio visualize faturas de cart√µes de cr√©dito, incluindo gastos, vencimento e valor total.

## Atores

- **Prim√°rio**: Usu√°rio

## Pr√©-condi√ß√µes

- Usu√°rio est√° autenticado (JWT v√°lido).
- Existem cart√µes em `cards` com transa√ß√µes em `transactions`.

## P√≥s-condi√ß√µes

- Fatura √© exibida no frontend.
- Log de visualiza√ß√£o √© registrado em `logs`.

## Fluxo Principal

1. Usu√°rio acessa a tela de cart√µes no frontend.
2. Seleciona cart√£o e clica em "Visualizar fatura".
3. Frontend envia `GET /api/cards/{id}/invoices`.
4. Backend consulta `invoices` e `transactions` (filtrado por `card_id`, per√≠odo).
5. Retorna: `{ invoice_id, due_date, total_amount, transactions: [] }`.
6. Frontend exibe fatura com Vuetify (tabela de transa√ß√µes, vencimento, total).
7. Usu√°rio pode exportar em PDF via jsPDF.
8. Backend registra a√ß√£o em `logs` (a√ß√£o: `view_invoice`).

## Fluxos Alternativos

- **A1**: Nenhuma fatura dispon√≠vel ‚Üí Backend retorna erro 404 ("Nenhuma fatura dispon√≠vel").

## Regras de Neg√≥cio

- Faturas baseadas no ciclo (`cards.closing_date` a `due_date`).
- `total_amount` soma `transactions.amount` do per√≠odo.
- Exporta√ß√£o PDF inclui t√≠tulo, per√≠odo e transa√ß√µes.

## Notas T√©cnicas

- **Frontend**: Vue.js, Vuetify, jsPDF.
- **Backend**: Laravel, Eloquent (modelos `Card`, `Invoice`, `Transaction`).
- **Endpoint**: `GET /api/cards/{id}/invoices?period=YYYY-MM` ‚Üí `{ invoices: [] }`.
- **Banco**: Tabela `invoices` (`card_id`, `due_date`, `total_amount`); `transactions` (`card_id`, `amount`); `logs` (`action`).
- **Integra√ß√µes**: jsPDF, notifica√ß√µes de vencimento.
- **Seguran√ßa**: JWT, valida√ß√£o de `user_id`.
