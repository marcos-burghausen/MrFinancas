üîô [Retornar √† documenta√ß√£o principal](../../README.md)

# Caso de Uso: Gerenciar Categoria

## Diagrama de Caso de Uso

```mermaid
usecaseDiagram
    actor Usu√°rio
    Usu√°rio --> (Gerenciar Categoria)
```

## Descri√ß√£o

Permite que o usu√°rio crie, edite ou exclua categorias e subcategorias financeiras.

## Atores

- **Prim√°rio**: Usu√°rio

## Pr√©-condi√ß√µes

- Usu√°rio est√° autenticado (JWT v√°lido).

## P√≥s-condi√ß√µes

- Categoria/subcategoria √© criada/editada/exclu√≠da em `categories`.
- Lista de categorias √© atualizada.
- Log de a√ß√£o √© registrado em `logs`.

## Fluxo Principal

1. Usu√°rio acessa a tela de categorias no frontend.
2. Escolhe a√ß√£o:
   - **Criar**: Preenche `{ name, icon, color, parent_id, type }` (ex.: ‚ÄúAlimenta√ß√£o‚Äù, √≠cone ‚Äúutensils‚Äù).
     - Frontend envia `POST /api/categories`.
     - Backend valida: `name` √∫nico por `user_id`, `parent_id` v√°lido.
     - Salva em `categories`.
   - **Editar**: Seleciona categoria, atualiza formul√°rio, envia `PUT /api/categories/{id}`.
     - Backend valida e atualiza.
   - **Excluir**: Seleciona categoria, envia `DELETE /api/categories/{id}`.
     - Backend verifica `transactions` e subcategorias; se vinculada, retorna erro.
     - Remove categoria (soft delete).
3. Frontend atualiza lista.
4. Backend registra a√ß√£o em `logs` (a√ß√£o: `create_category`, `update_category`, `delete_category`).

## Fluxos Alternativos

- **A1**: Dados inv√°lidos ‚Üí Backend retorna erro 422 ("Nome j√° existe ou dados inv√°lidos").
- **A2**: Categoria vinculada ‚Üí Backend retorna erro 409 ("Categoria vinculada a transa√ß√µes/subcategorias").

## Regras de Neg√≥cio

- Nomes s√£o √∫nicos por usu√°rio (`categories.name` + `user_id`).
- Subcategorias exigem `parent_id`.
- Suporta hierarquia multin√≠vel.
- Categorias predefinidas: ‚ÄúAlimenta√ß√£o‚Äù, ‚ÄúTransporte‚Äù, ‚ÄúLazer‚Äù.

## Notas T√©cnicas

- **Frontend**: Vue.js, Vuetify (formul√°rios e listas).
- **Backend**: Laravel, Eloquent (modelo `Category`).
- **Endpoints**:
  - `POST /api/categories`: `{ name: string, icon: string, color: string, parent_id: int|null, type: string }`.
  - `PUT /api/categories/{id}`: Atualiza dados.
  - `DELETE /api/categories/{id}`: Exclui (soft delete).
- **Banco**: Tabela `categories` (`name`, `user_id`, `parent_id`, `icon`, `color`); `logs` (`action`, `details`).
- **Integra√ß√µes**: Aparece em `transactions` e relat√≥rios.
- **Seguran√ßa**: JWT, valida√ß√£o de `user_id`.
