üîô [Retornar √† documenta√ß√£o principal](../../README.md)

# Diagrama de Classes: Sistema de Finan√ßas Pessoal

Este diagrama modela as entidades principais do sistema, seus atributos, m√©todos e relacionamentos, alinhados com o backend Laravel (modelos Eloquent) e o banco MySQL.

## Diagrama de Classes

```mermaid
classDiagram
    class User {
        +int id
        +string name
        +string email
        +string password
        +boolean email_verified
        +string avatar
        +string theme
        +timestamp created_at
        +timestamp updated_at
        +register(email, password, name) User
        +verifyEmail(token) boolean
        +updateProfile(data) boolean
    }
    class Account {
        +int id
        +int user_id
        +string name
        +string category
        +string icon
        +string color
        +decimal balance
        +timestamp created_at
        +timestamp updated_at
        +create(user_id, data) Account
        +update(data) boolean
        +delete() boolean
    }
    class Transaction {
        +int id
        +int user_id
        +int account_id
        +int? card_id
        +int category_id
        +string type
        +decimal amount
        +date date
        +string description
        +boolean recurring
        +string recurrence_frequency
        +timestamp created_at
        +timestamp updated_at
        +create(user_id, data) Transaction
        +update(data) boolean
        +delete() boolean
    }
    class Card {
        +int id
        +int user_id
        +int account_id
        +string name
        +decimal limit
        +string icon
        +string color
        +timestamp created_at
        +timestamp updated_at
        +create(user_id, data) Card
        +update(data) boolean
        +delete() boolean
        +getInvoice() Invoice
    }
    class Category {
        +int id
        +int user_id
        +int? parent_id
        +string name
        +string icon
        +string color
        +timestamp created_at
        +timestamp updated_at
        +create(user_id, data) Category
        +update(data) boolean
        +delete() boolean
    }
    class Notification {
        +int id
        +int user_id
        +string type
        +boolean enabled
        +int days_before
        +string time
        +timestamp created_at
        +timestamp updated_at
        +create(user_id, data) Notification
        +update(data) boolean
        +delete() boolean
    }
    class Invoice {
        +int id
        +int card_id
        +date due_date
        +decimal total_amount
        +timestamp created_at
        +timestamp updated_at
        +generate() Invoice
    }

    User ||--o{ Account : owns
    User ||--o{ Transaction : creates
    User ||--o{ Card : owns
    User ||--o{ Category : owns
    User ||--o{ Notification : configures
    Account ||--o{ Transaction : linked
    Account ||--o{ Card : linked
    Card ||--o{ Transaction : linked
    Card ||--o{ Invoice : generates
    Category ||--o{ Transaction : linked
    Category ||--o{ Category : parent
```

## Descri√ß√£o

### Classes e Relacionamentos

- **User**: Representa o usu√°rio, com autentica√ß√£o (e-mail/senha, OAuth) e perfil (avatar, tema).
  - Relacionamentos: Possui m√∫ltiplas contas, transa√ß√µes, cart√µes, categorias e notifica√ß√µes.
- **Account**: Representa contas banc√°rias, com saldo e personaliza√ß√£o (√≠cone, cor).
  - Relacionamentos: Vinculada a um usu√°rio, usada em transa√ß√µes e cart√µes.
- **Transaction**: Representa lan√ßamentos financeiros (despesas, receitas, cart√µes, estornos).
  - Relacionamentos: Vinculada a usu√°rio, conta, cart√£o (opcional) e categoria.
- **Card**: Representa cart√µes de cr√©dito, com limite e faturas.
  - Relacionamentos: Vinculada a usu√°rio e conta, usada em transa√ß√µes, gera faturas.
- **Category**: Representa categorias/subcategorias, com hierarquia.
  - Relacionamentos: Vinculada a usu√°rio, usada em transa√ß√µes, pode ter subcategorias.
- **Notification**: Representa configura√ß√µes de notifica√ß√µes (vencimentos, metas).
  - Relacionamentos: Vinculada a usu√°rio.
- **Invoice**: Representa faturas de cart√µes, com vencimento e total.
  - Relacionamentos: Vinculada a cart√£o.

### Notas T√©cnicas

- **Laravel**: Cada classe corresponde a um modelo Eloquent, com tabelas no MySQL.
  - Ex.: `User` mapeia para tabela `users`, com colunas `id`, `name`, `email`, etc.
  - Relacionamentos s√£o implementados com m√©todos Eloquent (ex.: `hasMany`, `belongsTo`).
- **Atributos**: Refletem colunas do banco, com tipos compat√≠veis (ex.: `decimal` para valores monet√°rios).
- **M√©todos**: Representam a√ß√µes principais (ex.: `create`, `update`, `delete`), implementadas como m√©todos nos modelos ou controladores.
- **Soft Deletes**: Usado em todas as classes para evitar exclus√£o f√≠sica (coluna `deleted_at`).
- **Criptografia**: Senhas e dados sens√≠veis (ex.: documentos) s√£o criptografados.
