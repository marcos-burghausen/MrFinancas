üîô [Retornar √† documenta√ß√£o principal](../../README.md)

# Diagrama de Sequ√™ncia: Fazer Login

Este diagrama descreve as intera√ß√µes para o login do usu√°rio com e-mail e senha.

## Diagrama de Sequ√™ncia

```mermaid
sequenceDiagram
    participant U as Usu√°rio
    participant F as Frontend (Vue.js)
    participant B as Backend (Laravel)
    participant DB as Banco (MySQL)

    U->>F: Acessa tela de login
    F->>U: Exibe formul√°rio
    U->>F: Preenche e-mail e senha
    F->>B: POST /auth/login (email, senha)
    B->>DB: Busca usu√°rio por e-mail
    DB-->>B: Usu√°rio encontrado
    B->>B: Valida senha (bcrypt)
    B->>DB: Gera token JWT
    DB-->>B: Token gerado
    B-->>F: Resposta: { token, usuario }
    F->>F: Armazena token (localStorage)
    F-->>U: Redireciona para dashboard
```

## Descri√ß√£o

### Fluxo Principal

1. O usu√°rio acessa a tela de login no frontend.
2. Preenche e-mail e senha e envia o formul√°rio.
3. O frontend envia `POST /auth/login` com `{ email, senha }`.
4. O backend busca o usu√°rio no banco pela coluna `email`.
5. Valida a senha usando bcrypt.
6. Gera um token JWT e retorna `{ token, usuario: { id, nome, email } }`.
7. O frontend armazena o token em `localStorage`.
8. Redireciona o usu√°rio para o dashboard.

### Fluxos Alternativos

- **A1**: E-mail n√£o encontrado ‚Üí Backend retorna erro 401 ("Credenciais inv√°lidas").
- **A2**: Senha incorreta ‚Üí Backend retorna erro 401 ("Credenciais inv√°lidas").
- **A3**: Erro no banco ‚Üí Backend retorna erro 500 e registra falha.

### Notas T√©cnicas

- **Frontend**: Vue.js com Vuetify para formul√°rio, Axios para requisi√ß√µes.
- **Backend**: Laravel com Sanctum para autentica√ß√£o.
  - Endpoint: `POST /auth/login` (controlador `AuthController`).
  - Modelo: `User` (colunas: `id`, `email`, `password`, `name`).
- **Banco**: Tabela `users` para autentica√ß√£o.
- **Seguran√ßa**: Senha criptografada com bcrypt; token JWT com expira√ß√£o.
- **Integra√ß√£o**: Suporta login social (planejado, e.g., `/auth/google`).