üîô [Retornar √† documenta√ß√£o principal](../../README.md)

# Fluxo: Gerenciar Categoria

Este documento descreve o processo de cria√ß√£o, visualiza√ß√£o, edi√ß√£o e exclus√£o de categorias e subcategorias.

## Diagrama de Fluxo

```mermaid
flowchart TD
    A["In√≠cio"] --> B["Usu√°rio acessa tela de categorias (Vue.js)"]
    B --> C["Escolhe a√ß√£o"]
    C --> D{"Criar nova categoria?"}
    D -->|Sim| E["Preenche: { name, icon, color, type, parent_id }"]
    E --> F["Frontend envia POST /api/categories"]
    F --> G{"Dados v√°lidos?"}
    G -->|Sim| H{"Subcategoria?"}
    H -->|Sim| I["Vincula a parent_id"]
    I --> J["Backend salva em categories"]
    H -->|N√£o| J
    J --> K["Registra a√ß√£o em logs (a√ß√£o: create_category)"]
    K --> L["Frontend exibe: 'Categoria criada'"]
    L --> M["Retorna √† lista"]
    M --> N["Fim"]
    G -->|N√£o| O["Backend retorna erro 422: 'Nome j√° existe'"]
    O --> P["Frontend retorna ao formul√°rio"]
    P --> E
    D -->|N√£o| Q["Frontend envia GET /api/categories"]
    Q --> R["Exibe lista de categorias"]
    R --> S["Seleciona categoria"]
    S --> T{"Editar?"}
    T -->|Sim| U["Edita formul√°rio"]
    U --> V["Frontend envia PUT /api/categories/{id}"]
    V --> W["Backend valida e salva"]
    W --> X["Registra a√ß√£o em logs (a√ß√£o: update_category)"]
    X --> M
    T -->|N√£o| Y{"Excluir?"}
    Y -->|Sim| Z["Confirma exclus√£o"]
    Z --> AA["Frontend envia DELETE /api/categories/{id}"]
    AA --> AB{"Categoria tem transa√ß√µes?"}
    AB -->|Sim| AC["Backend retorna erro 409: 'Categoria vinculada'"]
    AC --> M
    AB -->|N√£o| AD["Backend remove (soft delete)"]
    AD --> AE["Registra a√ß√£o em logs (a√ß√£o: delete_category)"]
    AE --> M
    Y -->|N√£o| M
```

## Descri√ß√£o do Processo

1. Usu√°rio acessa a tela de categorias no frontend.
2. Escolhe a√ß√£o:
   - **Criar**:
     - Preenche formul√°rio: `{ name, icon, color, type, parent_id }` (ex.: ‚ÄúAlimenta√ß√£o‚Äù).
     - Frontend envia `POST /api/categories`.
     - Backend valida: `name` √∫nico por `user_id`, `parent_id` v√°lido.
     - Salva em `categories`, registra em `logs`, exibe confirma√ß√£o.
   - **Visualizar**:
     - Frontend envia `GET /api/categories`.
     - Exibe lista com Vuetify.
   - **Editar**:
     - Edita formul√°rio, envia `PUT /api/categories/{id}`.
     - Backend valida, salva, registra em `logs`.
   - **Excluir**:
     - Confirma exclus√£o, envia `DELETE /api/categories/{id}`.
     - Backend verifica `transactions`; se vinculada, retorna erro 409.
     - Remove (soft delete), registra em `logs`.
3. Retorna √† lista.

## Regras de Neg√≥cio

- Nomes √∫nicos por usu√°rio (`categories.name` + `user_id`).
- Subcategorias exigem `parent_id`.
- Categorias vinculadas n√£o exclu√≠veis.
- Predefinidas: ‚ÄúAlimenta√ß√£o‚Äù, ‚ÄúTransporte‚Äù, ‚ÄúLazer‚Äù.
- Suporta hierarquia multin√≠vel.

## Notas T√©cnicas

- **Frontend**: Vue.js, Vuetify.
- **Backend**: Laravel, Eloquent (modelo `Category`).
- **Endpoints**:
  - `POST /api/categories`: `{ name: string, icon: string, color: string, type: string, parent_id: int|null }`.
  - `GET /api/categories`: Lista categorias.
  - `PUT /api/categories/{id}`: Atualiza.
  - `DELETE /api/categories/{id}`: Exclui.
- **Banco**: Tabelas `categories`, `logs`.
- **Integra√ß√µes**: Transa√ß√µes, relat√≥rios.
- **Seguran√ßa**: JWT, HTTPS.