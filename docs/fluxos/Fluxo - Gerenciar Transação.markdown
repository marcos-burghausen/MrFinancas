üîô [Retornar √† documenta√ß√£o principal](../../README.md)

# Fluxo: Gerenciar Transa√ß√£o

Este documento descreve o processo de cria√ß√£o, visualiza√ß√£o, edi√ß√£o e exclus√£o de transa√ß√µes financeiras, incluindo recorr√™ncia.

## Diagrama de Fluxo

```mermaid
flowchart TD
    A["In√≠cio"] --> B["Usu√°rio acessa tela de transa√ß√µes (Vue.js)"]
    B --> C["Escolhe a√ß√£o"]
    C --> D{"Criar nova transa√ß√£o?"}
    D -->|Sim| E["Seleciona tipo: Despesa, Receita, Cart√£o, Estorno"]
    E --> F["Preenche: { amount, date, description, account_id, card_id, category_id, recurring, frequency, end_date }"]
    F --> G["Frontend envia POST /api/transactions"]
    G --> H{"Dados v√°lidos?"}
    H -->|Sim| I{"Recorrente?"}
    I -->|Sim| J["Configura recorr√™ncia: daily, weekly, monthly"]
    J --> K["Backend salva transa√ß√£o e inst√¢ncias futuras"]
    K --> L["Atualiza accounts.balance ou invoices"]
    I -->|N√£o| M["Backend salva transa√ß√£o √∫nica"]
    M --> L
    L --> N["Registra a√ß√£o em logs (a√ß√£o: create_transaction)"]
    N --> O["Frontend exibe: 'Transa√ß√£o salva'"]
    O --> P["Retorna √† lista"]
    P --> Q["Fim"]
    H -->|N√£o| R["Backend retorna erro 422: 'Dados inv√°lidos'"]
    R --> S["Frontend retorna ao formul√°rio"]
    S --> F
    D -->|N√£o| T["Frontend envia GET /api/transactions"]
    T --> U["Aplica filtros: start_date, end_date, category_id, account_id"]
    U --> V["Exibe transa√ß√µes filtradas"]
    V --> W{"Editar ou excluir?"}
    W -->|Editar| X["Edita formul√°rio"]
    X --> Y["Frontend envia PUT /api/transactions/{id}"]
    Y --> Z["Backend valida e salva"]
    Z --> AA["Registra a√ß√£o em logs (a√ß√£o: update_transaction)"]
    AA --> P
    W -->|Excluir| AB["Confirma exclus√£o"]
    AB --> AC["Frontend envia DELETE /api/transactions/{id}"]
    AC --> AD["Backend remove (soft delete)"]
    AD --> AE["Registra a√ß√£o em logs (a√ß√£o: delete_transaction)"]
    AE --> P
    W -->|N√£o| P
```

## Descri√ß√£o do Processo

1. Usu√°rio acessa a tela de transa√ß√µes no frontend.
2. Escolhe a√ß√£o:
   - **Criar**:
     - Seleciona tipo (Despesa, Receita, Cart√£o, Estorno).
     - Preenche formul√°rio.
     - Frontend envia `POST /api/transactions`.
     - Backend valida: `amount > 0` (exceto estornos), `account_id`/`card_id`/`category_id` v√°lidos.
     - Se recorrente, agenda inst√¢ncias futuras.
     - Salva, atualiza saldos, registra em `logs`, exibe confirma√ß√£o.
   - **Visualizar**:
     - Frontend envia `GET /api/transactions` com filtros.
     - Exibe lista filtrada com Vuetify.
   - **Editar**:
     - Edita formul√°rio, envia `PUT /api/transactions/{id}`.
     - Backend valida, salva, atualiza saldos, registra em `logs`.
   - **Excluir**:
     - Confirma exclus√£o, envia `DELETE /api/transactions/{id}`.
     - Backend remove (soft delete), atualiza saldos, registra em `logs`.
3. Retorna √† lista.

## Regras de Neg√≥cio

- `amount > 0` (exceto estornos).
- `account_id` ou `card_id` obrigat√≥rio.
- Recorr√™ncia: Inst√¢ncias at√© `end_date`.
- Despesas diminuem saldo, receitas aumentam, cart√µes geram faturas, estornos revertem.
- Edi√ß√£o de recorrentes afeta inst√¢ncias futuras.

## Notas T√©cnicas

- **Frontend**: Vue.js, Vuetify.
- **Backend**: Laravel, Eloquent (modelo `Transaction`).
- **Endpoints**:
  - `POST /api/transactions`: `{ amount: decimal, date: date, description: string, account_id: int, card_id: int|null, category_id: int, recurring: boolean, frequency: string|null, end_date: date|null }`.
  - `GET /api/transactions`: Filtros como query params.
  - `PUT /api/transactions/{id}`: Atualiza.
  - `DELETE /api/transactions/{id}`: Exclui.
- **Banco**: Tabelas `transactions`, `accounts`, `invoices`, `logs`.
- **Integra√ß√µes**: Laravel Queue, notifica√ß√µes, relat√≥rios.
- **Seguran√ßa**: JWT, transa√ß√µes SQL.