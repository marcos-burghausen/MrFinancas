üîô [Retornar √† documenta√ß√£o principal](../../README.md)

# Fluxo: Fazer Login

Este documento descreve o processo de login de usu√°rio com autentica√ß√£o tradicional, OAuth e MFA.

## Diagrama de Fluxo

```mermaid
flowchart TD
    A["In√≠cio"] --> B["Usu√°rio acessa tela de login (Vue.js)"]
    B --> C["Escolhe m√©todo"]
    C --> D{"OAuth?"}
    D -->|Sim| E["Frontend redireciona para provedor OAuth"]
    E --> F["Provedor autentica"]
    F --> G{"Bem-sucedida?"}
    G -->|Sim| H["Backend valida usu√°rio em users"]
    H --> I["Gera token JWT"]
    I --> J["Registra a√ß√£o em logs (a√ß√£o: login)"]
    J --> K["Frontend redireciona para dashboard"]
    K --> L["Fim"]
    G -->|N√£o| M["Backend retorna erro 500: 'Falha OAuth'"]
    M --> N["Frontend retorna √† tela de login"]
    D -->|N√£o| O["Insere e-mail e senha"]
    O --> P["Frontend envia POST /api/login"]
    P --> Q{"Credenciais v√°lidas?"}
    Q -->|Sim| R{"MFA ativado? (settings.mfa_enabled)"}
    R -->|Sim| S["Frontend solicita c√≥digo MFA"]
    S --> T["Usu√°rio insere c√≥digo"]
    T --> U["Frontend envia POST /api/mfa/verify"]
    U --> V{"C√≥digo v√°lido?"}
    V -->|Sim| W["Gera token JWT"]
    W --> J
    V -->|N√£o| X["Backend retorna erro 422: 'C√≥digo inv√°lido'"]
    X --> Y["Frontend retorna √† tela de MFA"]
    Y --> T
    R -->|N√£o| Z["Gera token JWT"]
    Z --> J
    Q -->|N√£o| AA["Backend retorna erro 401: 'Credenciais inv√°lidas'"]
    AA --> AB["Oferece recupera√ß√£o de senha"]
    AB --> AC["Usu√°rio solicita via POST /api/password/reset"]
    AC --> AD["Backend envia e-mail com link"]
    AD --> AE["Usu√°rio redefine senha"]
    AE --> N
```

## Descri√ß√£o do Processo

1. Usu√°rio acessa a tela de login no frontend.
2. Escolhe m√©todo:
   - **OAuth**:
     - Redireciona para provedor (Facebook, Google, LinkedIn).
     - Provedor autentica e retorna dados.
     - Backend valida em `users`, gera JWT, registra em `logs`, redireciona para dashboard.
     - Se falhar, exibe erro 500.
   - **Tradicional**:
     - Insere e-mail e senha, envia `POST /api/login`.
     - Backend valida em `users` (bcrypt).
     - Se MFA ativado (`settings.mfa_enabled`):
       - Solicita c√≥digo (SMS via Twilio ou Google Authenticator).
       - Envia `POST /api/mfa/verify`.
       - Valida c√≥digo; se v√°lido, gera JWT; se n√£o, erro 422.
     - Se MFA desativado, gera JWT.
     - Registra em `logs`, redireciona para dashboard.
     - Se credenciais inv√°lidas, oferece recupera√ß√£o via `POST /api/password/reset`.
3. Retorna √† tela de login se necess√°rio.

## Regras de Neg√≥cio

- Tokens JWT expiram em 24 horas.
- 5 tentativas falhas bloqueiam por 15 minutos.
- Links de redefini√ß√£o expiram em 1 hora.
- MFA opcional, configurado em `settings`.

## Notas T√©cnicas

- **Frontend**: Vue.js, Vuetify, Axios.
- **Backend**: Laravel, Sanctum, Socialite.
- **Endpoints**:
  - `POST /api/login`: `{ email: string, password: string }` ‚Üí `{ token: string }`.
  - `POST /api/mfa/verify`: `{ code: string }` ‚Üí `{ token: string }`.
  - `POST /api/password/reset`: `{ email: string }`.
- **Banco**: Tabelas `users`, `settings`, `logs`.
- **Integra√ß√µes**: Twilio, Google Authenticator, AWS SES, Socialite.
- **Seguran√ßa**: JWT, bcrypt, rate limiting.