üîô [Retornar √† documenta√ß√£o principal](../../README.md)

# Fluxo: Gerenciar Conta

Este documento descreve o processo de cria√ß√£o, visualiza√ß√£o, edi√ß√£o e exclus√£o de contas banc√°rias.

## Diagrama de Fluxo

```mermaid
flowchart TD
    A["In√≠cio"] --> B["Usu√°rio acessa tela de contas (Vue.js)"]
    B --> C["Escolhe a√ß√£o"]
    C --> D{"Criar nova conta?"}
    D -->|Sim| E["Preenche: { name, category, icon, color, balance }"]
    E --> F["Frontend envia POST /api/accounts"]
    F --> G{"Dados v√°lidos?"}
    G -->|Sim| H["Backend salva em accounts"]
    H --> I["Registra a√ß√£o em logs (a√ß√£o: create_account)"]
    I --> J["Frontend exibe: 'Conta criada'"]
    J --> K["Retorna √† lista"]
    K --> L["Fim"]
    G -->|N√£o| M["Backend retorna erro 422: 'Dados inv√°lidos'"]
    M --> N["Frontend retorna ao formul√°rio"]
    N --> E
    D -->|N√£o| O["Frontend envia GET /api/accounts"]
    O --> P["Exibe lista de contas"]
    P --> Q["Seleciona conta"]
    Q --> R{"Editar?"}
    R -->|Sim| S["Edita formul√°rio"]
    S --> T["Frontend envia PUT /api/accounts/{id}"]
    T --> U["Backend valida e salva"]
    U --> V["Registra a√ß√£o em logs (a√ß√£o: update_account)"]
    V --> K
    R -->|N√£o| W{"Excluir?"}
    W -->|Sim| X["Confirma exclus√£o"]
    X --> Y["Frontend envia DELETE /api/accounts/{id}"]
    Y --> Z{"Conta tem transa√ß√µes/cart√µes?"}
    Z -->|Sim| AA["Backend retorna erro 409: 'Conta vinculada'"]
    AA --> K
    Z -->|N√£o| AB["Backend remove (soft delete)"]
    AB --> AC["Registra a√ß√£o em logs (a√ß√£o: delete_account)"]
    AC --> K
    W -->|N√£o| K
```

## Descri√ß√£o do Processo

1. Usu√°rio acessa a tela de contas no frontend.
2. Escolhe a√ß√£o:
   - **Criar**:
     - Preenche formul√°rio: `{ name, category, icon, color, balance }`.
     - Frontend envia `POST /api/accounts`.
     - Backend valida: `name` √∫nico, `balance >= 0`.
     - Salva em `accounts`, registra em `logs`, exibe confirma√ß√£o.
   - **Visualizar**:
     - Frontend envia `GET /api/accounts`.
     - Exibe lista com Vuetify.
   - **Editar**:
     - Edita formul√°rio, envia `PUT /api/accounts/{id}`.
     - Backend valida, salva, registra em `logs`.
   - **Excluir**:
     - Confirma exclus√£o, envia `DELETE /api/accounts/{id}`.
     - Backend verifica `transactions` e `cards`; se vinculada, retorna erro 409.
     - Remove (soft delete), registra em `logs`.
3. Retorna √† lista.

## Regras de Neg√≥cio

- Nomes √∫nicos por usu√°rio (`accounts.name` + `user_id`).
- Contas vinculadas n√£o exclu√≠veis.
- `balance >= 0`.
- √çcones e cores personaliz√°veis.

## Notas T√©cnicas

- **Frontend**: Vue.js, Vuetify.
- **Backend**: Laravel, Eloquent (modelo `Account`).
- **Endpoints**:
  - `POST /api/accounts`: `{ name: string, category: string, icon: string, color: string, balance: decimal }`.
  - `GET /api/accounts`: Lista contas.
  - `PUT /api/accounts/{id}`: Atualiza.
  - `DELETE /api/accounts/{id}`: Exclui.
- **Banco**: Tabelas `accounts`, `logs`.
- **Integra√ß√µes**: Transa√ß√µes, relat√≥rios, transfer√™ncias.
- **Seguran√ßa**: JWT, HTTPS.