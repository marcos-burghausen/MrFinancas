üîô [Retornar √† documenta√ß√£o principal](../../README.md)

# Diagrama de Sequ√™ncia: Cadastrar Usu√°rio

Este diagrama descreve as intera√ß√µes entre o usu√°rio, o frontend (Vue.js), o backend (Laravel) e o sistema de e-mails para o cadastro tradicional com verifica√ß√£o de e-mail.

## Diagrama de Sequ√™ncia

```mermaid
sequenceDiagram
    participant U as Usu√°rio
    participant F as Frontend (Vue.js)
    participant B as Backend (Laravel)
    participant DB as Banco (MySQL)
    participant E as Sistema de E-mails

    U->>F: Acessa tela de cadastro
    F->>U: Exibe formul√°rio
    U->>F: Preenche formul√°rio (e-mail, senha, nome)
    F->>B: POST /api/register (e-mail, senha, nome)
    B->>DB: Verifica se e-mail √© √∫nico
    DB-->>B: E-mail dispon√≠vel
    B->>DB: Cria usu√°rio (status: n√£o verificado)
    DB-->>B: Usu√°rio criado
    B->>E: Envia e-mail de verifica√ß√£o
    E-->>B: E-mail enviado
    B-->>F: Resposta: "Verifique seu e-mail"
    F-->>U: Exibe mensagem
    U->>E: Clica no link de verifica√ß√£o
    E->>B: GET /api/verify-email?token
    B->>DB: Valida token
    DB-->>B: Token v√°lido
    B->>DB: Marca usu√°rio como verificado
    DB-->>B: Usu√°rio atualizado
    B-->>U: Redireciona para login
```

## Descri√ß√£o

### Fluxo Principal

1. O usu√°rio acessa a tela de cadastro no frontend (Vue.js).
2. Preenche o formul√°rio (e-mail, senha, nome) e envia.
3. O frontend faz uma requisi√ß√£o POST ao backend (endpoint `/api/register`).
4. O backend verifica se o e-mail √© √∫nico no banco.
5. Cria o usu√°rio com status "n√£o verificado" e salva no banco.
6. Envia um e-mail de verifica√ß√£o via sistema de e-mails (ex.: Laravel Mail).
7. Retorna mensagem ao frontend, que exibe "Verifique seu e-mail".
8. O usu√°rio clica no link de verifica√ß√£o, acionando o endpoint `/api/verify-email`.
9. O backend valida o token, atualiza o status do usu√°rio e redireciona para a tela de login.

### Fluxos Alternativos

- **A1**: E-mail j√° registrado ‚Üí Backend retorna erro 422 ("E-mail j√° registrado").
- **A2**: Token inv√°lido ‚Üí Backend retorna erro ("Link inv√°lido") e oferece reenvio.
- **A3**: Erro no envio de e-mail ‚Üí Backend registra falha e notifica ADMIN (futuro).

### Notas T√©cnicas

- **Frontend**: Usa Vue.js com Axios para requisi√ß√µes HTTP.
- **Backend**: Usa Laravel com Eloquent para manipula√ß√£o do modelo `User`.
  - Endpoint: `POST /api/register` (controlador `AuthController`).
  - Endpoint: `GET /api/verify-email` (valida token).
- **Banco**: Tabela `users` com colunas `email`, `password`, `name`, `email_verified`.
- **E-mails**: Usa Laravel Mail com filas (ex.: Redis) para envio ass√≠ncrono.
- **Seguran√ßa**: Senha √© criptografada com bcrypt; token de verifica√ß√£o √© √∫nico e tempor√°rio.
